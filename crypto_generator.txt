<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Constants Generator</title>
    
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">

    <style>
        /* --- UI THEME ADAPTED FROM INDEX.HTML --- */
        :root {
            --color-primary-start: #6a11cb;
            --color-primary-end: #2575fc;
            --color-surface: #FFFFFF;
            --color-on-surface: #1a1c1c;
            --color-on-surface-variant: #6c757d;
            --color-outline: #dee2e6;
            --color-background-start: #f0f4ff;
            --color-background-end: #e6f7ff;
            --font-family-main: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }

        *, *::before, *::after {
            box-sizing: border-box;
        }

        html, body {
            height: 100%;
            margin: 0;
        }

        body {
            font-family: var(--font-family-main);
            background: linear-gradient(135deg, var(--color-background-start) 0%, var(--color-background-end) 100%);
            color: var(--color-on-surface);
            display: grid;
            place-items: center;
            padding: 1rem;
            line-height: 1.6;
        }

        .card {
            width: 100%;
            max-width: 500px; /* Slightly wider for better form layout */
            background-color: var(--color-surface);
            border-radius: 24px;
            padding: 2.5rem;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.07);
            opacity: 0;
            transform: translateY(20px);
            animation: floatUp 0.7s cubic-bezier(0.25, 1, 0.5, 1) forwards;
        }
        
        @keyframes floatUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .card-header {
            margin-bottom: 2rem;
        }
        
        .card-header h2 {
            font-size: 1.75rem;
            font-weight: 700;
            margin: 0 0 0.5rem;
        }

        .card-header p {
            color: var(--color-on-surface-variant);
            margin: 0;
            font-size: 1rem;
            max-width: 40ch;
            margin-left: auto;
            margin-right: auto;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
            text-align: left;
        }

        .form-group label {
            display: block;
            font-weight: 500;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .styled-input {
            width: 100%;
            padding: 0.875rem 1rem;
            font-size: 1rem;
            font-family: inherit;
            border: 1px solid var(--color-outline);
            border-radius: 12px;
            background-color: #f8f9fa;
            transition: all 0.2s ease-in-out;
        }

        .styled-input:focus {
            outline: none;
            border-color: var(--color-primary-end);
            box-shadow: 0 0 0 3px rgba(37, 117, 252, 0.15);
            background-color: var(--color-surface);
        }

        .generate-button {
            display: block;
            width: 100%;
            padding: 0.875rem;
            font-size: 1rem;
            font-weight: 600;
            color: #fff;
            background: linear-gradient(90deg, var(--color-primary-start) 0%, var(--color-primary-end) 100%);
            border: none;
            border-radius: 12px;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .generate-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        #output {
            margin-top: 2rem;
            background-color: #f8f9fa;
            border: 1px solid var(--color-outline);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: left;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: 'SF Mono', 'Menlo', 'Courier New', monospace;
            font-size: 0.875rem;
            line-height: 1.6;
            display: none; /* Hidden by default */
        }

        .copy-button {
            display: block;
            margin: 1rem auto 0;
            background: none;
            border: 1px solid var(--color-primary-end);
            color: var(--color-primary-end);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        .copy-button:hover {
            background-color: rgba(37, 117, 252, 0.1);
            color: var(--color-primary-start);
        }
    </style>
</head>
<body>
    <main class="card">
        <div class="card-header">
            <h2>Crypto Generator</h2>
            <p>Create the constants for your secure redirect page.</p>
        </div>
        
        <form id="generatorForm" onsubmit="return false;">
            <div class="form-group">
                <label for="password">New Password</label>
                <input type="text" id="password" class="styled-input" placeholder="Enter a strong password">
            </div>
            
            <div class="form-group">
                <label for="url">URL to Protect</label>
                <input type="text" id="url" class="styled-input" placeholder="https://...">
            </div>
            
            <button id="generateBtn" class="generate-button">Generate Constants</button>
        </form>
        
        <div id="output">
            <pre id="outputCode"></pre>
            <button class="copy-button" id="copyBtn">Copy to Clipboard</button>
        </div>
    </main>

    <script>
        document.getElementById('generateBtn').addEventListener('click', async () => {
            const password = document.getElementById('password').value;
            const url = document.getElementById('url').value;

            if (!password || !url) {
                alert("Please provide both a password and a URL.");
                return;
            }

            // --- Hashing ---
            const msgBuffer = new TextEncoder().encode(password);
            const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const passwordHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

            // --- Encryption ---
            const salt = crypto.getRandomValues(new Uint8Array(16));
            const iv = crypto.getRandomValues(new Uint8Array(12));
            const urlBuffer = new TextEncoder().encode(url);
            
            const keyMaterial = await crypto.subtle.importKey('raw', msgBuffer, { name: 'PBKDF2' }, false, ['deriveKey']);
            const key = await crypto.subtle.deriveKey(
                { name: 'PBKDF2', salt: salt, iterations: 100000, hash: 'SHA-256' },
                keyMaterial,
                { name: 'AES-GCM', length: 256 },
                true,
                ['encrypt']
            );
            
            const ciphertext = await crypto.subtle.encrypt({ name: 'AES-GCM', iv: iv }, key, urlBuffer);
            
            // --- Base64 Encoding for Storage ---
            const arrayBufferToBase64 = (buffer) => {
                let binary = '';
                const bytes = new Uint8Array(buffer);
                const len = bytes.byteLength;
                for (let i = 0; i < len; i++) {
                    binary += String.fromCharCode(bytes[i]);
                }
                return window.btoa(binary);
            };

            const saltB64 = arrayBufferToBase64(salt);
            const ivB64 = arrayBufferToBase64(iv);
            const ciphertextB64 = arrayBufferToBase64(ciphertext);

            const outputCode = `// The SHA-256 hash of the password.
const CORRECT_PASSWORD_HASH = '${passwordHash}';
            
// Encrypted data for URL using the password.
const SALT_B64 = '${saltB64}';
const IV_B64 = '${ivB64}';
const CIPHERTEXT_B64 = '${ciphertextB64}';`;
            
            const outputElement = document.getElementById('output');
            const outputCodeElement = document.getElementById('outputCode');
            
            outputCodeElement.textContent = outputCode;
            outputElement.style.display = 'block';
        });

        document.getElementById('copyBtn').addEventListener('click', () => {
            const codeToCopy = document.getElementById('outputCode').textContent;
            navigator.clipboard.writeText(codeToCopy).then(() => {
                const copyBtn = document.getElementById('copyBtn');
                copyBtn.textContent = 'Copied!';
                setTimeout(() => { copyBtn.textContent = 'Copy to Clipboard'; }, 2000);
            }).catch(err => {
                console.error('Failed to copy text: ', err);
            });
        });
    </script>
</body>
</html>

